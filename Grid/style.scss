/// On using Grid,
/// Grid layout shines when the design require 2-dimensional
/// Also, compare to Flexbox, which works from the content out
/// the Grid works from the layout in
/// 
/// 4 term to remember when using it
/// - Grid Line, define after, for example, the grid-template-columns: repeat(3, 1fr);
    /// where the first arg of repeat() specify how many times of repeatition
    /// and the second arg specify the value of column (here is 1fr)
        /// and the unit fr means the fraction(or percentage) of the available space in the grid container
    /// and this declare 4 grid lines, all of the line seperated by track, which discuss as follow
/// - Grid track, literally defined by, for example, grid-template-columns: repeat(3, 1fr)
    /// which specify 3 tracks with equal fraction
    /// and we can think this as the area separated by 2 grid line
/// - Grid cell, the smallest unit in grid layout
/// - Grid Area, separated by 4 grid line, consist of several grid cell
.container {
    background-color: azure;

    display: grid;

    /// we can also make the grid, like this:
    // display: inline-grid;
    /// which make this container flow inline
    /// and only be as wide as is necessary to contain its children

    /// after make the element a grid container
    /// next to specify how the children to be placed
    /// for example, make them, 3 column and 3 row
    grid-template-columns: repeat(3, 1fr);
    grid-template-rows: repeat(3, 1fr);

    /// we can also use some gap between cells, like
    grid-gap: .5rem;
    /// which is short for row-gap: .5rem and column-gap: .5rem

    /// after we learn the naming of the area,
    /// let's use it right away~
    grid-template-areas: "start-of-the-day surviving go-to-bed"
                         "surviving-of-the-day the-goal reminding-yourself"
                         "why-you-are-here hang-in-there you-will-be-fine";

    /// the following justify-items and align-items apply to the content within Grid cell
    justify-items: center;
    align-items: center;

    /// these two will also apply to the content within cell
    /// justify-self and align-self
    /// but only set to the cell itself

    /// for the sake of trying out how justify-content and align-content
    /// affect Grid track
    /// we need to explictly set the width and height
    /// both of which will bigger than the track
    /// so that there will be empty or unfill space to demonstrate the effect
    
    /// the size of container
    width: 1240px;
    height: 800px;
    margin: 0 auto; // centering the container

    /// resize the track, as these will override the code above
    grid-template-columns: repeat(3, 200px);
    grid-template-rows: repeat(3, 100px);

    /// then, play with it!
    justify-content: space-around;
    align-content: center;
}

/// after setting the layout of container
/// what we do next is to put each item into their position
/// by specifying the grid-column and grid-row, for example:
// .just-to-illustrate-putting-cell-to-position {
//     grid-column: 1 / 3;
//     /// where 1 stand for the starting line and 3 for the end
//     /// so, this means this cell spanning from line 1 to 3
//     /// if the container have 4 tracks,
//     /// this cell cover 3!

//     grid-row: span 1;
//     /// where span, well, means span...
//     /// and that number 1, stand for the number of tracks
//     /// in this case, this cell spanning for 1 track
    
// }

/// Naming Grid Line 
// .just-to-illustrate-naming-grid-line {
//     /// there are so many ways to name this thing...
//     /// this is just one of the many...

//     /// simply using [] to surround the name
//     /// and put it on the line position, where it's between tracks, 
//     /// which is defined in the value of grid-template-columns
//     grid-template-columns: [left-start] 1fr
//                            [left-end center-begin] 1fr
//                            [center-end right-start] 1fr
//                            [right-start];
//     grid-template-rows: repeat(3, [row] auto);
// }

/// Naming Grid Area
// .just-to-illustrate-naming-grid-area {
//     /// if the container setting is following
//     grid-template-columns: repeat(3, 1fr);
//     grid-template-rows: repeat(3, 1fr);

//     /// we can just name the position of the cell
//     /// by forming the name of cell as a rectangle shape
//     /// and use . to represent the empty one
//     grid-template-areas: "top-left top-center top-right"
//                          ".         center      .       "
//                          "bottom-left bottom-center bottom-right";
//     /// as you can see,
//     /// this is a horrible naming... 
//     /// no meaning of the position, no everything...
//     /// but here just an example... and not a very good one...
// }

.cell {
    width: 50px;
    height: 50px;

    &:nth-of-type(1) {
        background-color: salmon;

        grid-area: start-of-the-day;

        /// try out the alignment property
        justify-self: baseline;
    }

    &:nth-of-type(2) {
        background-color: turquoise;

        grid-area: surviving;

        /// try out the alignment property
        align-self: end;
    }
    
    &:nth-of-type(3) {
        background-color: teal;

        grid-area: go-to-bed;
    }
    
    &:nth-of-type(4) {
        background-color: skyblue;

        grid-area: surviving-of-the-day;
    }
    
    &:nth-of-type(5) {
        background-color: yellow;

        grid-area: the-goal;
    }
    
    &:nth-of-type(6) {
        background-color: wheat;

        grid-area: you-will-be-fine;
    }    
}