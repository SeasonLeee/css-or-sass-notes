{"version":3,"sources":["style.scss"],"names":[],"mappings":"AAgBA;EACI,uBAAuB;EAEvB,aAAa;EAUb,qCAAqC;EACrC,kCAAkC;EAGlC,eAAe;EAKf,gKAEsE;EAGtE,qBAAqB;EACrB,yBAAmB;UAAnB,mBAAmB;EAanB,aAAa;EACb,aAAa;EACb,cAAc;EAGd,uCAAuC;EACvC,oCAAoC;EAGpC,6BAA6B;EAC7B,qBAAqB,EAAA;;AAqDzB;EACI,WAAW;EACX,YAAY,EAAA;EAFhB;IAKQ,wBAAwB;IAExB,2BAA2B;IAG3B,sBAAsB,EAAA;EAV9B;IAcQ,2BAA2B;IAE3B,oBAAoB;IAGpB,eAAe,EAAA;EAnBvB;IAuBQ,sBAAsB;IAEtB,oBAAoB,EAAA;EAzB5B;IA6BQ,yBAAyB;IAEzB,+BAA+B,EAAA;EA/BvC;IAmCQ,wBAAwB;IAExB,mBAAmB,EAAA;EArC3B;IAyCQ,uBAAuB;IAEvB,2BAA2B,EAAA","file":"style.css","sourcesContent":["/// On using Grid,\n/// Grid layout shines when the design require 2-dimensional\n/// Also, compare to Flexbox, which works from the content out\n/// the Grid works from the layout in\n/// \n/// 4 term to remember when using it\n/// - Grid Line, define after, for example, the grid-template-columns: repeat(3, 1fr);\n    /// where the first arg of repeat() specify how many times of repeatition\n    /// and the second arg specify the value of column (here is 1fr)\n        /// and the unit fr means the fraction(or percentage) of the available space in the grid container\n    /// and this declare 4 grid lines, all of the line seperated by track, which discuss as follow\n/// - Grid track, literally defined by, for example, grid-template-columns: repeat(3, 1fr)\n    /// which specify 3 tracks with equal fraction\n    /// and we can think this as the area separated by 2 grid line\n/// - Grid cell, the smallest unit in grid layout\n/// - Grid Area, separated by 4 grid line, consist of several grid cell\n.container {\n    background-color: azure;\n\n    display: grid;\n\n    /// we can also make the grid, like this:\n    // display: inline-grid;\n    /// which make this container flow inline\n    /// and only be as wide as is necessary to contain its children\n\n    /// after make the element a grid container\n    /// next to specify how the children to be placed\n    /// for example, make them, 3 column and 3 row\n    grid-template-columns: repeat(3, 1fr);\n    grid-template-rows: repeat(3, 1fr);\n\n    /// we can also use some gap between cells, like\n    grid-gap: .5rem;\n    /// which is short for row-gap: .5rem and column-gap: .5rem\n\n    /// after we learn the naming of the area,\n    /// let's use it right away~\n    grid-template-areas: \"start-of-the-day surviving go-to-bed\"\n                         \"surviving-of-the-day the-goal reminding-yourself\"\n                         \"why-you-are-here hang-in-there you-will-be-fine\";\n\n    /// the following justify-items and align-items apply to the content within Grid cell\n    justify-items: center;\n    align-items: center;\n\n    /// these two will also apply to the content within cell\n    /// justify-self and align-self\n    /// but only set to the cell itself\n\n    /// for the sake of trying out how justify-content and align-content\n    /// affect Grid track\n    /// we need to explictly set the width and height\n    /// both of which will bigger than the track\n    /// so that there will be empty or unfill space to demonstrate the effect\n    \n    /// the size of container\n    width: 1240px;\n    height: 800px;\n    margin: 0 auto; // centering the container\n\n    /// resize the track, as these will override the code above\n    grid-template-columns: repeat(3, 200px);\n    grid-template-rows: repeat(3, 100px);\n\n    /// then, play with it!\n    justify-content: space-around;\n    align-content: center;\n}\n\n/// after setting the layout of container\n/// what we do next is to put each item into their position\n/// by specifying the grid-column and grid-row, for example:\n// .just-to-illustrate-putting-cell-to-position {\n//     grid-column: 1 / 3;\n//     /// where 1 stand for the starting line and 3 for the end\n//     /// so, this means this cell spanning from line 1 to 3\n//     /// if the container have 4 tracks,\n//     /// this cell cover 3!\n\n//     grid-row: span 1;\n//     /// where span, well, means span...\n//     /// and that number 1, stand for the number of tracks\n//     /// in this case, this cell spanning for 1 track\n    \n// }\n\n/// Naming Grid Line \n// .just-to-illustrate-naming-grid-line {\n//     /// there are so many ways to name this thing...\n//     /// this is just one of the many...\n\n//     /// simply using [] to surround the name\n//     /// and put it on the line position, where it's between tracks, \n//     /// which is defined in the value of grid-template-columns\n//     grid-template-columns: [left-start] 1fr\n//                            [left-end center-begin] 1fr\n//                            [center-end right-start] 1fr\n//                            [right-start];\n//     grid-template-rows: repeat(3, [row] auto);\n// }\n\n/// Naming Grid Area\n// .just-to-illustrate-naming-grid-area {\n//     /// if the container setting is following\n//     grid-template-columns: repeat(3, 1fr);\n//     grid-template-rows: repeat(3, 1fr);\n\n//     /// we can just name the position of the cell\n//     /// by forming the name of cell as a rectangle shape\n//     /// and use . to represent the empty one\n//     grid-template-areas: \"top-left top-center top-right\"\n//                          \".         center      .       \"\n//                          \"bottom-left bottom-center bottom-right\";\n//     /// as you can see,\n//     /// this is a horrible naming... \n//     /// no meaning of the position, no everything...\n//     /// but here just an example... and not a very good one...\n// }\n\n.cell {\n    width: 50px;\n    height: 50px;\n\n    &:nth-of-type(1) {\n        background-color: salmon;\n\n        grid-area: start-of-the-day;\n\n        /// try out the alignment property\n        justify-self: baseline;\n    }\n\n    &:nth-of-type(2) {\n        background-color: turquoise;\n\n        grid-area: surviving;\n\n        /// try out the alignment property\n        align-self: end;\n    }\n    \n    &:nth-of-type(3) {\n        background-color: teal;\n\n        grid-area: go-to-bed;\n    }\n    \n    &:nth-of-type(4) {\n        background-color: skyblue;\n\n        grid-area: surviving-of-the-day;\n    }\n    \n    &:nth-of-type(5) {\n        background-color: yellow;\n\n        grid-area: the-goal;\n    }\n    \n    &:nth-of-type(6) {\n        background-color: wheat;\n\n        grid-area: you-will-be-fine;\n    }    \n}"]}